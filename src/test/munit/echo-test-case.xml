<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:wsc="http://www.mulesoft.org/schema/mule/wsc"
      xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
      http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
      http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
      http://www.mulesoft.org/schema/mule/wsc http://www.mulesoft.org/schema/mule/wsc/current/mule-wsc.xsd">

    <munit:config name="echo-test-cases">
        <munit:parameterizations>
            <munit:parameterization name="DefaultTransport_SOAP11">
                <munit:parameters>
                    <munit:parameter propertyName="soapVersion" value="SOAP11"/>
                    <munit:parameter propertyName="wsPort" value="${WS_SOAP11_PORT}"/>
                    <munit:parameter propertyName="mtomEnabled" value="false"/>
                    <munit:parameter propertyName="config" value="default-config"/>
                </munit:parameters>
            </munit:parameterization>
            <munit:parameterization name="CustomTransport_SOAP11">
                <munit:parameters>
                    <munit:parameter propertyName="soapVersion" value="SOAP11"/>
                    <munit:parameter propertyName="wsPort" value="${WS_SOAP11_PORT}"/>
                    <munit:parameter propertyName="mtomEnabled" value="false"/>
                    <munit:parameter propertyName="config" value="custom-transport-config"/>
                </munit:parameters>
            </munit:parameterization>
            <munit:parameterization name="DefaultTransport_SOAP12">
                <munit:parameters>
                    <munit:parameter propertyName="soapVersion" value="SOAP12"/>
                    <munit:parameter propertyName="wsPort" value="${WS_SOAP12_PORT}"/>
                    <munit:parameter propertyName="mtomEnabled" value="false"/>
                    <munit:parameter propertyName="config" value="default-config"/>
                </munit:parameters>
            </munit:parameterization>
            <munit:parameterization name="CustomTransport_SOAP12">
                <munit:parameters>
                    <munit:parameter propertyName="soapVersion" value="SOAP12"/>
                    <munit:parameter propertyName="wsPort" value="${WS_SOAP12_PORT}"/>
                    <munit:parameter propertyName="mtomEnabled" value="false"/>
                    <munit:parameter propertyName="config" value="custom-transport-config"/>
                </munit:parameters>
            </munit:parameterization>
        </munit:parameterizations>
    </munit:config>

    <!-- Tests -->

    <munit:test name="echoOperation" description="Consumes an operation that expects a simple type and returns a simple type" ignore="#[Munit::muleVersionPriorTo('4.1.2')]">
        <munit:execution>
            <set-variable variableName="text" value="test" />
            <flow-ref name="buildEchoRequest" />
            <wsc:consume config-ref="${config}" operation="echo">
                <wsc:message>
                    <wsc:body>#[payload]</wsc:body>
                </wsc:message>
            </wsc:consume>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-equals actual="#[payload.body.echoResponse.text]" expected="#['test response']"/>
        </munit:validation>
    </munit:test>

    <munit:test name="echoWithHeadersOperation" description="Consumes an operation that expects an input and a set of headers and returns a simple type and a set of header" ignore="#[Munit::muleVersionPriorTo('4.1.2')]">
        <munit:execution>
            <wsc:consume config-ref="${config}" operation="echoWithHeaders">
                <wsc:message>
                    <wsc:body>
                        #[
                        %dw 2.0
                        output application/xml
                        ns con http://service.soap.service.mule.org/
                        ---
                        con#echoWithHeaders: {
                            text: "test"
                        }]
                    </wsc:body>
                    <wsc:headers>
                        #[
                        %dw 2.0
                        output application/xml
                        ns con http://service.soap.service.mule.org/
                        ---
                        "headers": {
                            con#headerIn: "Header In Value",
                            con#headerInOut: "Header In Out Value"
                        }]
                    </wsc:headers>
                </wsc:message>
            </wsc:consume>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-equals actual="#[payload.body.echoWithHeadersResponse.text]" expected="#['test response']"/>
            <munit-tools:assert-equals actual="#[sizeOf(payload.headers)]" expected="#[2]"/>
            <munit-tools:assert-equals actual="#[payload.headers.headerInOut.headerInOut]" expected="#['Header In Out Value INOUT']"/>
            <munit-tools:assert-equals actual="#[payload.headers.headerOut.headerOut]" expected="#['Header In Value OUT']"/>
        </munit:validation>
    </munit:test>

    <munit:test name="responseToJson" description="Consumes an operation and transforms the whole payload into a json" ignore="#[Munit::muleVersionPriorTo('4.1.2')]">
        <munit:execution>
            <wsc:consume config-ref="${config}" operation="echoWithHeaders">
                <wsc:message>
                    <wsc:body>
                        #[
                        %dw 2.0
                        output application/xml
                        ns con http://service.soap.service.mule.org/
                        ---
                        con#echoWithHeaders: {
                            text: "test"
                        }]
                    </wsc:body>
                    <wsc:headers>
                        #[
                        %dw 2.0
                        output application/xml
                        ns con http://service.soap.service.mule.org/
                        ---
                        "headers": {
                            con#headerIn: "Header In Value",
                            con#headerInOut: "Header In Out Value"
                        }]
                    </wsc:headers>
                </wsc:message>
            </wsc:consume>
            <set-payload value="#[output application/json --- payload]"/>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-equals actual="#[payload.body]" expected='#[{ "echoWithHeadersResponse": { "text": "test response" } }]'/>
            <munit-tools:assert-equals actual="#[payload.attachments]" expected='#[{}]'/>
            <munit-tools:assert-equals actual="#[payload.headers]" expected='#[{ "headerInOut": { "headerInOut": "Header In Out Value INOUT" }, "headerOut": { "headerOut": "Header In Value OUT" } }]'/>
        </munit:validation>
    </munit:test>

    <munit:test name="echoAccountOperation" description="Consumes an operation that expects 2 parameters (a simple one and a complex one) and returns a complex type" ignore="#[Munit::muleVersionPriorTo('4.1.2')]">
        <munit:execution>
            <wsc:consume config-ref="${config}" operation="echoAccount">
                <wsc:message>
                    <wsc:body>
                        #[
                        %dw 2.0
                        output application/xml
                        ns con http://service.soap.service.mule.org/
                        ---
                        con#echoAccount: {
                            account: {
                                id: 12,
                                startingDate: "2016-09-23T00:00:00-03:00"
                            },
                            name: "Juan"
                        }]
                    </wsc:body>
                </wsc:message>
            </wsc:consume>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-equals actual="#[payload.body.echoAccountResponse.account.clientName]" expected="#['Juan']"/>
            <munit-tools:assert-equals actual="#[payload.body.echoAccountResponse.account.id]" expected="#['12']"/>
            <munit-tools:assert-equals actual="#[payload.body.echoAccountResponse.account.items]" expected="#['chocolate']"/>
            <munit-tools:assert-equals actual="#[payload.body.echoAccountResponse.account.startingDate]" expected="#['2016-09-23T00:00:00-03:00']"/>
            <munit-tools:assert-that expression="#[payload.body.echoAccountResponse.name]" is="#[MunitTools::nullValue()]" />
            <munit-tools:assert-equals actual="#[payload.headers]" expected="#[{}]" />
        </munit:validation>
    </munit:test>

    <munit:test name="withDynamicConfiguration" description="Consumes an operation that uses a dynamic config with a dynamic wsdlLocation" ignore="#[Munit::muleVersionPriorTo('4.1.2')]">
        <munit:execution>
            <set-variable variableName="wsdlLocation" value="http://localhost:${wsPort}/${soapVersion}/?wsdl" />
            <wsc:consume config-ref="dynamic-config" operation="echoAccount">
                <wsc:message>
                    <wsc:body>
                        #[
                        %dw 2.0
                        output application/xml
                        ns con http://service.soap.service.mule.org/
                        ---
                        con#echoAccount: {
                            name: "Juan"
                        }]
                    </wsc:body>
                </wsc:message>
            </wsc:consume>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-equals actual="#[payload.body.echoAccountResponse.account.clientName]" expected="#['Juan']"/>
            <munit-tools:assert-equals actual="#[payload.body.echoAccountResponse.account.id]" expected="#['12']"/>
            <munit-tools:assert-equals actual="#[payload.body.echoAccountResponse.account.items]" expected="#['chocolate']"/>
            <munit-tools:assert-equals actual="#[payload.body.echoAccountResponse.account.startingDate]" expected="#['2016-09-23T00:00:00-03:00']"/>
            <munit-tools:assert-that expression="#[payload.body.echoAccountResponse.name]" is="#[MunitTools::nullValue()]" />
            <munit-tools:assert-equals actual="#[payload.headers]" expected="#[{}]" />
        </munit:validation>
    </munit:test>

    <munit:test name="echoWithStaticHeadersOperation" description="Consumes an operation that expects an input and a set of static headers badly formed." expectedErrorType="WSC:BAD_REQUEST" ignore="#[Munit::muleVersionPriorTo('4.1.2')]">
        <munit:execution>
            <wsc:consume config-ref="${config}" operation="echoWithHeaders">
                <wsc:message>
                    <wsc:body>
                        #[
                        %dw 2.0
                        output application/xml
                        ns con http://service.soap.service.mule.org/
                        ---
                        con#echoWithHeaders: {
                            text: "test"
                        }]
                    </wsc:body>
                    <wsc:headers>
                        #[
                        %dw 2.0
                        output application/xml
                        ns con http://service.soap.service.mule.org/
                        ---
                        "invalidHeaders": {
                            con#headerIn: "Header In Value",
                            con#headerInOut: "Header In Out Value"
                        }]
                    </wsc:headers>
                </wsc:message>
            </wsc:consume>
        </munit:execution>
    </munit:test>

</mule>